import { useState } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './components/ui/card'
import { Button } from './components/ui/button'
import { Textarea } from './components/ui/textarea'

import { Label } from './components/ui/label'
import { Tabs, TabsContent, TabsList, TabsTrigger } from './components/ui/tabs'
import { Switch } from './components/ui/switch'
import { Slider } from './components/ui/slider'
import { Download, Gamepad2, Settings, Code, Play, Zap } from 'lucide-react'
import { Badge } from './components/ui/badge'

function App() {
  const [shotTiming, setShotTiming] = useState([450])
  const [releaseWindow, setReleaseWindow] = useState([50])
  const [vibrationEnabled, setVibrationEnabled] = useState(true)
  const [autoShootEnabled, setAutoShootEnabled] = useState(true)
  const [playerDetection, setPlayerDetection] = useState(true)
  const [shotMeterEnabled, setShotMeterEnabled] = useState(true)
  
  const generateGBCScript = () => {
    const gbcScript = `/*
NBA 2K25 Auto-Green Script for Cronus Zen
Generated by NBA 2K25 Auto-Green Script Generator
Configuration: Shot Timing: ${shotTiming[0]}ms, Release Window: ${releaseWindow[0]}ms
*/

#include <gtuner.gph>

#pragma METAINFO("NBA 2K25 Auto Green", 1, 0, "NBA 2K25 auto-green shooting script")

// Configuration
#define SHOT_TIMING         ${shotTiming[0]}    // Milliseconds to hold shoot button
#define RELEASE_WINDOW      ${releaseWindow[0]}     // Release window tolerance in ms
#define VIBRATION_ENABLED   ${vibrationEnabled ? 'TRUE' : 'FALSE'}   // Enable controller vibration feedback
#define AUTO_SHOOT_ENABLED  ${autoShootEnabled ? 'TRUE' : 'FALSE'}   // Enable automatic shooting
#define PLAYER_DETECTION    ${playerDetection ? 'TRUE' : 'FALSE'}   // Detect if player has ball
#define SHOT_METER_ENABLED  ${shotMeterEnabled ? 'TRUE' : 'FALSE'}   // Use shot meter detection

// Button mappings for PS5
#define SHOOT_BUTTON        PS5_SQUARE
#define SPRINT_BUTTON       PS5_R2
#define TURBO_BUTTON        PS5_L2

// Variables
int shot_start_time = 0;
int shooting = FALSE;
int perfect_release_detected = FALSE;
bool player_has_ball = FALSE;
int shot_meter_position = 0;

main {
    // Check if player has ball (optional detection)
    if(PLAYER_DETECTION) {
        detect_player_possession();
    }
    
    // Auto-shoot detection and execution
    if(AUTO_SHOOT_ENABLED && player_has_ball) {
        handle_auto_shooting();
    }
    
    // Manual shooting assistance
    if(get_val(SHOOT_BUTTON) && !shooting) {
        start_perfect_shot();
    }
    
    // Continue perfect shot execution
    if(shooting) {
        execute_perfect_shot();
    }
    
    // Provide haptic feedback
    if(VIBRATION_ENABLED && perfect_release_detected) {
        provide_feedback();
    }
}

// Detect if player has possession of the ball
void detect_player_possession() {
    // This is a simplified detection - in reality, this would involve
    // more complex game state analysis
    player_has_ball = TRUE; // Placeholder - would need game-specific detection
}

// Handle automatic shooting when conditions are met
void handle_auto_shooting() {
    // Check if player is in shooting position
    // This would typically involve checking player position, shot clock, etc.
    if(is_in_shooting_position()) {
        if(!shooting) {
            start_perfect_shot();
        }
    }
}

// Check if player is in optimal shooting position
bool is_in_shooting_position() {
    // Placeholder logic - would need game-specific positioning detection
    // For now, trigger on sprint + shoot button combination
    return (get_val(SPRINT_BUTTON) > 80 && !shooting);
}

// Initialize perfect shot sequence
void start_perfect_shot() {
    shooting = TRUE;
    shot_start_time = system_time();
    perfect_release_detected = FALSE;
    
    // Press and hold shoot button
    set_val(SHOOT_BUTTON, 100);
}

// Execute the perfect shot timing
void execute_perfect_shot() {
    int elapsed_time = system_time() - shot_start_time;
    
    if(SHOT_METER_ENABLED) {
        // Use shot meter for precise timing
        execute_shot_with_meter();
    } else {
        // Use time-based approach
        execute_shot_with_timing(elapsed_time);
    }
}

// Execute shot using shot meter detection
void execute_shot_with_meter() {
    // This would involve detecting the shot meter position
    // and releasing at the perfect moment
    // For now, using timing as fallback
    int elapsed_time = system_time() - shot_start_time;
    execute_shot_with_timing(elapsed_time);
}

// Execute shot using precise timing
void execute_shot_with_timing(int elapsed_time) {
    // Check if we're in the perfect release window
    if(elapsed_time >= SHOT_TIMING - RELEASE_WINDOW && 
       elapsed_time <= SHOT_TIMING + RELEASE_WINDOW) {
        
        // Release the button for perfect timing
        set_val(SHOOT_BUTTON, 0);
        perfect_release_detected = TRUE;
        shooting = FALSE;
        
        // Quick tap for perfect release
        wait(10);
        set_val(SHOOT_BUTTON, 100);
        wait(10);
        set_val(SHOOT_BUTTON, 0);
    }
    
    // Safety timeout - release if held too long
    if(elapsed_time > SHOT_TIMING + RELEASE_WINDOW + 100) {
        set_val(SHOOT_BUTTON, 0);
        shooting = FALSE;
    }
}

// Provide haptic feedback for successful shots
void provide_feedback() {
    if(perfect_release_detected) {
        // Vibrate controller to indicate perfect release
        ffb_set(FFB_1, 100, 100);
        wait(100);
        ffb_set(FFB_1, 0, 0);
        perfect_release_detected = FALSE;
    }
}

// Additional helper functions for advanced features
void handle_combo_moves() {
    // Handle specific combo moves and shot types
    // This would be expanded based on specific move requirements
}

void adjust_for_player_stats() {
    // Adjust timing based on player's shooting stats
    // Higher rated players might have different optimal timing
}

void handle_different_shot_types() {
    // Different shot types (3-pointer, mid-range, layup) might need
    // different timing adjustments
}
`
    
    return gbcScript
  }

  const downloadScript = () => {
    const script = generateGBCScript()
    const blob = new Blob([script], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'NBA2K25_AutoGreen.gpc'
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900">
      {/* Header */}
      <div className="border-b border-white/10 bg-black/20 backdrop-blur-sm">
        <div className="max-w-7xl mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 rounded-xl bg-gradient-to-br from-green-400 to-emerald-500">
                <Gamepad2 className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-white">NBA 2K25 Auto-Green</h1>
                <p className="text-purple-200">Cronus Zen Script Generator</p>
              </div>
            </div>
            <Badge variant="secondary" className="bg-green-500/20 text-green-300 border-green-500/30">
              <Zap className="h-4 w-4 mr-1" />
              PS5 Ready
            </Badge>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* Configuration Panel */}
          <div className="lg:col-span-1">
            <Card className="bg-black/30 border-white/10 backdrop-blur-sm">
              <CardHeader>
                <CardTitle className="text-white flex items-center">
                  <Settings className="h-5 w-5 mr-2" />
                  Script Configuration
                </CardTitle>
                <CardDescription className="text-purple-200">
                  Customize your auto-green settings
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                
                {/* Shot Timing */}
                <div className="space-y-3">
                  <Label className="text-white">Shot Timing (ms)</Label>
                  <Slider
                    value={shotTiming}
                    onValueChange={setShotTiming}
                    max={1000}
                    min={200}
                    step={10}
                    className="w-full"
                  />
                  <p className="text-sm text-purple-300">{shotTiming[0]}ms</p>
                </div>

                {/* Release Window */}
                <div className="space-y-3">
                  <Label className="text-white">Release Window (ms)</Label>
                  <Slider
                    value={releaseWindow}
                    onValueChange={setReleaseWindow}
                    max={100}
                    min={10}
                    step={5}
                    className="w-full"
                  />
                  <p className="text-sm text-purple-300">Â±{releaseWindow[0]}ms tolerance</p>
                </div>

                {/* Toggle Options */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label className="text-white">Controller Vibration</Label>
                    <Switch
                      checked={vibrationEnabled}
                      onCheckedChange={setVibrationEnabled}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <Label className="text-white">Auto-Shoot Mode</Label>
                    <Switch
                      checked={autoShootEnabled}
                      onCheckedChange={setAutoShootEnabled}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <Label className="text-white">Player Detection</Label>
                    <Switch
                      checked={playerDetection}
                      onCheckedChange={setPlayerDetection}
                    />
                  </div>
                  
                  <div className="flex items-center justify-between">
                    <Label className="text-white">Shot Meter Detection</Label>
                    <Switch
                      checked={shotMeterEnabled}
                      onCheckedChange={setShotMeterEnabled}
                    />
                  </div>
                </div>

                {/* Download Button */}
                <Button 
                  onClick={downloadScript}
                  className="w-full bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white"
                  size="lg"
                >
                  <Download className="h-5 w-5 mr-2" />
                  Download GBC Script
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-2">
            <Tabs defaultValue="script" className="space-y-4">
              <TabsList className="grid w-full grid-cols-3 bg-black/30 border-white/10">
                <TabsTrigger value="script" className="data-[state=active]:bg-white/20">
                  <Code className="h-4 w-4 mr-2" />
                  Script
                </TabsTrigger>
                <TabsTrigger value="instructions" className="data-[state=active]:bg-white/20">
                  <Settings className="h-4 w-4 mr-2" />
                  Setup
                </TabsTrigger>
                <TabsTrigger value="features" className="data-[state=active]:bg-white/20">
                  <Play className="h-4 w-4 mr-2" />
                  Features
                </TabsTrigger>
              </TabsList>

              <TabsContent value="script">
                <Card className="bg-black/30 border-white/10 backdrop-blur-sm">
                  <CardHeader>
                    <CardTitle className="text-white">Generated GBC Script</CardTitle>
                    <CardDescription className="text-purple-200">
                      Copy this script to your Cronus Zen device
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Textarea
                      value={generateGBCScript()}
                      readOnly
                      className="min-h-[500px] font-mono text-sm bg-black/50 text-green-300 border-white/20"
                    />
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="instructions">
                <Card className="bg-black/30 border-white/10 backdrop-blur-sm">
                  <CardHeader>
                    <CardTitle className="text-white">Setup Instructions</CardTitle>
                    <CardDescription className="text-purple-200">
                      How to install and use the script with Cronus Zen
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="space-y-4 text-white">
                    <div className="space-y-2">
                      <h3 className="text-lg font-semibold text-green-400">1. Download & Install</h3>
                      <ul className="list-disc list-inside space-y-1 text-purple-200">
                        <li>Click "Download GBC Script" to get the .gpc file</li>
                        <li>Connect your Cronus Zen to your computer</li>
                        <li>Open Cronus Zen Studio software</li>
                        <li>Load the downloaded .gpc script</li>
                      </ul>
                    </div>
                    
                    <div className="space-y-2">
                      <h3 className="text-lg font-semibold text-green-400">2. Configure Hardware</h3>
                      <ul className="list-disc list-inside space-y-1 text-purple-200">
                        <li>Connect PS5 controller to Cronus Zen</li>
                        <li>Connect Cronus Zen to PS5 console</li>
                        <li>Ensure all connections are secure</li>
                        <li>Upload the script to your Cronus Zen device</li>
                      </ul>
                    </div>
                    
                    <div className="space-y-2">
                      <h3 className="text-lg font-semibold text-green-400">3. In-Game Usage</h3>
                      <ul className="list-disc list-inside space-y-1 text-purple-200">
                        <li>Start NBA 2K25 on your PS5</li>
                        <li>The script will automatically assist with shot timing</li>
                        <li>Manual shooting: Press Square to trigger perfect release</li>
                        <li>Auto-mode: Script will detect shooting opportunities</li>
                      </ul>
                    </div>
                    
                    <div className="p-4 rounded-lg bg-yellow-500/20 border border-yellow-500/30">
                      <p className="text-yellow-300 font-medium">
                        â ï¸ Important: Use responsibly and check your game's terms of service. 
                        This script is for educational and practice purposes.
                      </p>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="features">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <Card className="bg-black/30 border-white/10 backdrop-blur-sm">
                    <CardHeader>
                      <CardTitle className="text-white text-lg">ð¯ Perfect Timing</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-purple-200">
                        Precisely calibrated release timing for consistent green releases
                      </p>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-black/30 border-white/10 backdrop-blur-sm">
                    <CardHeader>
                      <CardTitle className="text-white text-lg">ð Auto-Shoot Mode</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-purple-200">
                        Automatically detects shooting opportunities and executes perfect shots
                      </p>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-black/30 border-white/10 backdrop-blur-sm">
                    <CardHeader>
                      <CardTitle className="text-white text-lg">ð Shot Meter Detection</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-purple-200">
                        Advanced detection of in-game shot meter for precise timing
                      </p>
                    </CardContent>
                  </Card>
                  
                  <Card className="bg-black/30 border-white/10 backdrop-blur-sm">
                    <CardHeader>
                      <CardTitle className="text-white text-lg">ð® Haptic Feedback</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-purple-200">
                        Controller vibration confirms successful perfect releases
                      </p>
                    </CardContent>
                  </Card>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  )
}

export default App